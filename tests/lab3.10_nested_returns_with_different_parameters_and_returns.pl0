VAR result : int;

PROCEDURE performArithmetic(x, y : int) -> (int);
	VAR sum_res, power_res, operation_res : int;

	PROCEDURE sum(x, y : int) -> (int);
		BEGIN
			return (x + y)
		END;

	PROCEDURE multiply(x, y : int) -> (int);
		BEGIN
			return (x * y)
		END;

	PROCEDURE power(base, exponent : int) -> (int);
		VAR respow, i : int;
		BEGIN
			respow := base;
			for i := 0; i < (exponent - 1); i := i + 1 DO BEGIN
				respow := respow * base
			END;
			return (respow)
		END;

	/* this computes (x + y) * (x ^ 2) */
	PROCEDURE operation(x, y : int) -> (int, int, int);
		VAR sum_res, power_res, res : int;
		BEGIN
			CALL sum(x, y) -> (sum_res);
			CALL power(x, 2) -> (power_res);
			CALL multiply(sum_res, power_res) -> (res);
			return (sum_res, power_res, res)
		END;

	BEGIN
		CALL operation(x, y) -> (_, _, operation_res);

		return (operation_res)
	END;

BEGIN
	CALL performArithmetic(23, 32) -> (result);
	print result
END
