PROCEDURE power(base, exponent : int);
	VAR result : int;

	PROCEDURE square(x : int);
		VAR ressquare : int;
		BEGIN
			ressquare := x * x;
			print ressquare
		END;

	PROCEDURE powerOfTwo(exponent : int);
		VAR resshift : int;
		BEGIN
			// parentheses needed because shift has a higher precedence than -
			resshift := 2 << (exponent - 1);
			print resshift
		END;

	PROCEDURE powerWithFors(base, exponent : int);
		VAR respow, i : int;
		BEGIN
			respow := base;
			for i := 0; i < (exponent - 1); i := i + 1 DO BEGIN
				respow := respow * base
			END;
			print respow
		END;

	BEGIN
		if exponent < 0 then begin
			print -1
		end elif exponent = 0 then begin
			print base
		end elif exponent = 2 then begin
			CALL square(base)
		end elif base = 2 then begin
			CALL powerOfTwo(exponent)
		end else begin
			CALL powerWithFors(base, exponent)
		end
	END;

BEGIN
	CALL power(3, 4);
	CALL power(4, 2);
	CALL power(2, 5);
	CALL power(43, 0);
	CALL power(4, -1)
END.
