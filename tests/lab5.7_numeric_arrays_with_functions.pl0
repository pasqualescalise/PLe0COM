VAR i, array[10] : int;
VAR byte_array[10] : byte;
VAR ubyte_array[10] : ubyte;

PROCEDURE for_in_print(arr[10], len : int);
	VAR i : int;

	BEGIN
		for i := 0; i < len; i := i + 1 do begin
			print arr[i]
		end
	END;

PROCEDURE for_in_square_and_print(arr[10], len : int);
	VAR elem, i : int;
	BEGIN
		for i := 0; i < len; i := i + 1 do begin
			elem := arr[i];
			arr[i] := elem * elem
		end;

		CALL for_in_print(arr, len)
	END;

PROCEDURE for_in_print_byte(arr[20] : byte, len : int);
	VAR i : int;

	BEGIN
		for i := 0; i < len; i := i + 1 do begin
			print arr[i]
		end
	END;

PROCEDURE for_in_cube_and_print_byte(arr[10] : byte, len : int);
	VAR elem, i : int;
	BEGIN
		for i := 0; i < len; i := i + 1 do begin
			elem := arr[i];
			arr[i] := elem * elem * elem
		end;

		CALL for_in_print_byte(arr, len)
	END;

PROCEDURE for_in_print_ubyte(arr[20] : ubyte, len : int);
	VAR i : int;

	BEGIN
		for i := 0; i < len; i := i + 1 do begin
			print arr[i]
		end
	END;

PROCEDURE for_in_cube_and_print_ubyte(arr[10] : ubyte, len : int);
	VAR elem, i : int;
	BEGIN
		for i := 0; i < len; i := i + 1 do begin
			elem := arr[i];
			arr[i] := elem * elem * elem
		end;

		CALL for_in_print_ubyte(arr, len)
	END;

BEGIN
	for i := 0; i < 10; i := i + 1 do begin
		array[i] := i
	end;
	CALL for_in_print(array, 10);
	CALL for_in_square_and_print(array, 10);
	CALL for_in_print(array, 10);

	for i := 0; i < 10; i := i + 1 do begin
		byte_array[i] := i
	end;
	CALL for_in_print_byte(byte_array, 10);
	CALL for_in_cube_and_print_byte(byte_array, 10);
	CALL for_in_print_byte(byte_array, 10);

	for i := 0; i < 10; i := i + 1 do begin
		ubyte_array[i] := i
	end;
	CALL for_in_print_ubyte(ubyte_array, 10);
	CALL for_in_cube_and_print_ubyte(ubyte_array, 10);
	CALL for_in_print_ubyte(ubyte_array, 10)
END.
